syntax = "proto3";

package ReservationLogicControllerSummit;

option java_package = "com.jtc.ReservationLogicControllerSummit.common.proto";
option java_outer_classname = "JtcLiftProto";
option csharp_namespace = "JtcLiftProto";


//------------------Lift data----------------------//
enum MoveStatus {
  UNDEFINED_MOVE = 0;
  STATIONARY = 1;
  UP = 2;
  DOWN = 3;
}

enum Mode {
  UNDEFINED_MODE = 0;
  POWER_SAVING = 1;
  NORMAL = 2;
  SERVICING = 3;
  OUT_OF_ORDER = 4;
  POWER_FAILURE = 5;
  MODE_FIVE = 6;
  MODE_SIX = 7;
  MODE_SEVEN = 8;
  MODE_EIGHT = 9;
  EMERGENCY = 10;
  MODE_TEN = 11;
  MODE_ELEVEN = 12;
  MODE_TWELVE = 13;
  FIRE = 14;
  ROBOT_MODE = 15;
  VIP_MODE = 16;
  EDGE_DISCONNECTED = 17;
}

message JtcLiftData {
  string deviceId = 1;
  bool isCarFull = 2;
  int32 currentLocation = 3;
  MoveStatus moveStatus = 4;
  Mode mode = 5;
  bool isDoorFullyOpened = 6;
  bool isDoorFullyClosed = 7;
  int64 epochTime = 8;
}

message JtcLiftDataPayload {
  string requestID = 1;
  string user = 2;
  repeated JtcLiftData liftDataArray = 3;
  int64 epochTime = 4;
}


//------------------Initialization request----------------------//
enum JtcLiftRpcMode
{
  INITIALIZE = 0;
}

message JtcLiftRpcRequest
{
  string requestID = 1;
  string user = 2;
  repeated string deviceIdArray = 3;
  JtcLiftRpcMode modeRequest = 4;
  int64 epochTime = 5;
}

//------------------Control payload----------------------//
enum DoorControl {
  UNDEFINED_DOOR_ACTION = 0;
  CLOSE = 1;
  OPEN = 2;
}

enum ODP
{
  NO_ODP_MODE = 0;
  ODP_ROBOT_MODE = 1;
  ODP_VIP_MODE = 2;
}

message JtcLiftControlPayload {
  string requestID = 1;
  string user = 2;
  string deviceId = 3;
  ODP odpMode = 4;
  int32 locationRequest = 5;
  DoorControl doorControl = 6;
  bool isLoadingMode = 7;
  int64 epochTime = 8;
}

//------------------Reservations----------------------//

enum ReservationStatus {
  ACCEPTED = 0; // user's request is successful
  TO_BOARDING = 1;
  BOARDING_OPEN = 2;
  TO_DESTINATION = 3;
  DESTINATION_OPEN = 4;
  RESERVATION_IN_SESSION = 5;
  RESERVATION_ENDED = 6;
  REQUEST_FAILED = 7;   // user's request failed
  //new
  CANCELLED = 8;  // reservation is cancelled by user
  EXTENDED = 9;    // reservation is extended by user
  NO_RESERVATION = 10;
}

enum EmbarkationStatus {
  UNDEFINED = 0;
  WAITING_TO_BOARD = 1;
  BOARDED = 2;
  ALIGHTED = 3;
  BOARDING_FAIL = 4;
  ALIGHTING_FAIL = 5;
}

enum ReservationUpdateMode {
  RELEASE = 0;
  EXTEND = 1;
}

message JtcLiftReservationRequest {
  string requestID = 1;
  string user = 2;
  string vendorID = 3;
  string deviceId = 4;
  int32 boardingLevel = 5;
  int32 destinationLevel = 6;
  int64 reservationStartDateTime = 7;
  int64 reservationEndDateTime = 8;
  int64 reservationDuration = 9;
  int64 epochTime = 10;
}

//use for cancellation/extension
message JtcLiftReservationUpdate {
  string requestID = 1; //
  string deviceId = 2;
  string user = 3;
  string vendorID = 4;
  ReservationUpdateMode reservationUpdateMode = 5;
  int64 extensionDurationSeconds = 6; // time in seconds
  int64 epochTime = 7;
}

// For replies to reservation requests via RPC
message JtcLiftReservationReply {
  string requestID = 1;
  string user = 2;
  string vendorID = 3;
  string deviceId = 4;
  int32 currentLevel = 5;
  ReservationStatus reservationStatus = 6;
  string failureDescription = 7;
  int64 epochTime = 8;
}

// received by QMS; for users to notify that boarding or alighting has been successfully executed
message JtcRobotEmbarkationNotification {
  string requestID = 1;
  string user = 2; // same as robotID
  string vendorID = 3;
  string deviceId = 4;
  int32 boardingLevel = 5;
  int32 destinationLevel = 6;
  EmbarkationStatus embarkationStatus = 7;
  int64 epochTime = 8;
}


